buildscript {
  ext.kotlin_version = '1.2.21'

  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2' // Workaround for https://github.com/johnrengelman/shadow/issues/336
  }
}

plugins {
  id 'java'
  id 'application'
  id 'de.undercouch.download' version '3.3.0' // For the download tasks
  id 'eclipse' // Support for Eclipse projects
  id 'idea' // Support for IntelliJ IDEA projects
  id 'com.github.sherter.google-java-format' version '0.8'
}
//apply plugin: 'kotlin'

mainClassName = "org.callmemaybe.CallMeMaybe"
apply plugin: 'com.github.johnrengelman.shadow' // Workaround for https://github.com/johnrengelman/shadow/issues/336

task downloadRandoop(type: Download) {
  src 'https://github.com/randoop/randoop/releases/download/v4.2.0/randoop-4.2.0.jar'
  dest 'lib/'
  onlyIfNewer true
  overwrite false
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'
jar {
  manifest {
    attributes 'Implementation-Title': 'CallMeMaybe', 'Implementation-Version': version
  }
}

sourceSets {
  main {
    java {
      excludes = ['org/callmemaybe/util/old/*']
    }
  }
  test {
    java {
      excludes = ['org/callmemaybe/util/old*',
                  'org/callmemaybe/regression/*',
                  'org/callmemaybe/generator/**',
                  'org/callmemaybe/translator/**',
                  'org/callmemaybe/extractor/**']
    }
    resources {
      exclude 'goal-output/issta_2018'
    }
  }
}

test {
  exclude 'org/callmemaybe/generator/**'
  exclude 'org/callmemaybe/accuracy/paper/*'
  reports {
    html.enabled = true
  }
  testLogging.showStandardStreams = true
  // Print standard output during tests execution.
  testLogging {
    events 'FAILED', 'SKIPPED', 'PASSED'
    exceptionFormat = 'full'
  }
}


task accuracy(type: Test) {
  include 'org/callmemaybe/accuracy/protocols/'
  enableAssertions = false
}

/* Pass Java system properties from the command line to test tasks. */
tasks.withType(Test) {
  systemProperties System.getProperties()
}

/* Create Javadoc documentation as part of build task. */
// build.dependsOn javadoc
// javadoc {
//   options.encoding = 'UTF-8'
//   exclude 'org/callmemaybe/generator/**'
//   exclude 'org/callmemaybe/util/old/**'
// }

/* Disable unneeded tasks. */
startScripts.enabled = false
distZip.enabled = false
distTar.enabled = false
assemble.enabled = false
// To exclude shadowJar task from build: ./gradlew build -PdisableShadowJar
if (project.hasProperty('disableShadowJar')) {
  shadowJar.enabled = false
}
startShadowScripts.enabled = false
shadowDistZip.enabled = false
shadowDistTar.enabled = false

compileJava {
  options.compilerArgs << '-Xlint:unchecked,deprecation'
  options.encoding = 'UTF-8'
}

repositories {
  mavenCentral()
}

dependencies {
  compile fileTree(dir: 'lib', include: '*.jar')
  def randoopJar = ["https://github.com/randoop/randoop/releases/download/v4.2.0/randoop-4.2.0.jar"]
                .collect{fileName->new File(fileName)}

  compile files{randoopJar}
  compile files("${System.properties['java.home']}/../lib/tools.jar")
  compile 'edu.stanford.nlp:stanford-corenlp:3.7.0'
  compile 'edu.stanford.nlp:stanford-corenlp:3.7.0:models-english'
  compile 'de.jungblut.math:tjungblut-math:1.3'
  compile 'de.jungblut.common:thomasjungblut-common:1.1'
  compile 'org.deeplearning4j:deeplearning4j-nlp:1.0.0-beta6'
  compile 'org.nd4j:nd4j-native-platform:1.0.0-beta6'
  compile 'org.jsoup:jsoup:1.8.3' // JSoup used only to remove HTML tags in comments.
  compile 'com.github.javaparser:javaparser-core:3.11.0'
  compile 'com.beust:jcommander:1.72'
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'commons-io:commons-io:2.5'
  compile 'org.slf4j:slf4j-simple:1.7.21'
  compile 'org.apache.commons:commons-lang3:3.4'
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile 'org.mdkt.compiler:InMemoryJavaCompiler:1.3.0'
  compile 'org.reflections:reflections:0.9.11'
  testCompile 'junit:junit:4.12'
  testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
}

compileJava.dependsOn(downloadRandoop)

// The following configuration excludes sfl4j->log4j binding that is added by de.jungblut.common
// dependency.
configurations.all {
  exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.3.1'
}

import de.undercouch.gradle.tasks.download.Download

/* Downloads binaries of the systems used to measure accuracy */
task downloadBinaries(type: Download) {
  src ([
    // commons-collections
    'https://repo1.maven.org/maven2/org/apache/commons/commons-collections4/4.1/commons-collections4-4.1.jar',
    // guava
    'https://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0.jar',
    // gs
    'https://repo1.maven.org/maven2/org/graphstream/gs-core/1.3/gs-core-1.3.jar',
    // weka
    'https://repo1.maven.org/maven2/nz/ac/waikato/cms/weka/weka-stable/3.8.0/weka-stable-3.8.0.jar',
    // colt
    'https://repo1.maven.org/maven2/colt/colt/1.2.0/colt-1.2.0.jar',
    // lucene
    'https://repo1.maven.org/maven2/org/apache/lucene/lucene-core/7.2.1/lucene-core-7.2.1.jar',
    // JDK8
    'https://star-rep.inf.usi.ch/arianna_blasi/jdk8-resources/raw/master/jdk8-2.9.0.jar'
  ])
  dest 'src/test/resources/bin'
  onlyIfNewer true
  overwrite false
}

/* Extracts binaries that were not already downloaded directly. */
// task extractBinaries(type: Exec, dependsOn: 'downloadBinaries') {
//   description "Extract .jar files from downloaded files"
//   workingDir 'src/test/resources/bin'
//   commandLine "bash", "-c", "tar xzf plume-lib-1.1.0.tar.gz --strip-components=2 plume-lib-1.1.0/java/plume.jar && mv plume.jar plume-lib-1.1.0.jar"
// }

/* Downloads sources of the systems used to measure accuracy */
task downloadSources(type: Download) {
  src ([
    'https://archive.apache.org/dist/commons/collections/source/commons-collections4-4.1-src.zip',
    'https://repo1.maven.org/maven2/com/google/guava/guava/19.0/guava-19.0-sources.jar',
    'https://repo1.maven.org/maven2/org/graphstream/gs-core/1.3/gs-core-1.3-sources.jar',
    'https://repo1.maven.org/maven2/nz/ac/waikato/cms/weka/weka-stable/3.8.0/weka-stable-3.8.0-sources.jar',
    'https://star-rep.inf.usi.ch/arianna_blasi/jdk8-resources/raw/master/jdk8-sources.zip',
    'https://github.com/kzn/colt/archive/refs/heads/master.zip',
    'https://repo1.maven.org/maven2/org/apache/lucene/lucene-core/7.2.1/lucene-core-7.2.1-sources.jar',
  ])
  dest 'src/test/resources/src'
  onlyIfNewer true
  overwrite false
}

/* Extracts source archives of the systems used to measure accuracy */
task extractSources(dependsOn: downloadSources) {
  doLast {
    file('src/test/resources/src').listFiles().findAll {
      it.name.endsWith('.zip') || it.name.endsWith('.tar.gz') || it.name.endsWith('.jar')
    }.each { file ->
      if (file.name.endsWith('.zip')) {
        copy {
          from zipTree(file)
          into 'src/test/resources/src/'
          fileMode 0664
        }
      } else if (file.name.endsWith('.tar.gz')) {
        copy {
          from tarTree(resources.gzip(file))
          into 'src/test/resources/src/'
          fileMode 0664
        }
      } else if (file.name.endsWith('.jar')) {
        def fileName = file.name
        def index = fileName.lastIndexOf('.')
        def fileBaseName = fileName.substring(0, index)
        copy {
          from zipTree(file)
          into 'src/test/resources/src/' + fileBaseName
          fileMode 0664
        }
      }
    }
  }
}

/* Workaround for the Javaparser bug: https://github.com/javaparser/javaparser/issues/990 */
task cleanSource(type: Exec, dependsOn: 'extractSources') {
    commandLine './clean.sh'
}

task removeTestOutputDirs(type: Delete) {
  delete 'build/test-results', 'aspects'
}

test.dependsOn removeTestOutputDirs, cleanSource, extractSources, downloadBinaries
// , extractBinaries

/* Make Emacs TAGS table */
task tags(type: Exec) {
  description "Run etags to create an Emacs TAGS table"
  environment PATH: "$System.env.PATH:$buildDir/utils/plume-lib/bin"
  commandLine "bash", "-c", "find src/ -path src/test/resources -prune -o -name '*.java' | sort-directory-order | xargs etags"
}

/* Install the git pre-commit hook */
task installGitHook(type: Copy) {
  from(new File(rootProject.rootDir, "git-pre-commit-hook.sh")) {
    rename({ return "pre-commit" })
  }
  into { new File(rootProject.rootDir, ".git/hooks") }
}
build.dependsOn(installGitHook)

build.dependsOn verifyGoogleJavaFormat
googleJavaFormat {
  exclude 'out'
  exclude 'src/test/resources'
  exclude 'src/main/resources/AspectTemplate.java'
  exclude 'ase-22-experiments'
}

shadowJar {
  // default: "${baseName}-${version}-${classifier}.${extension}",
  // where ${baseName} is the name of the directory into which the callmemaybe
  // repository is cloned.
  archiveName = "CallMeMaybe-${version}-${classifier}.${extension}"
  zip64 true
}

/* Downloads dependencies needed for the tutorial. */
task tutorial(type: Download) {
  src ([
    'http://search.maven.org/remotecontent?filepath=junit/junit/4.12/junit-4.12.jar',
    'http://search.maven.org/remotecontent?filepath=org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjtools/1.8.9/aspectjtools-1.8.9.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjweaver/1.8.9/aspectjweaver-1.8.9.jar',
    'http://central.maven.org/maven2/org/aspectj/aspectjrt/1.8.9/aspectjrt-1.8.9.jar'
  ])
  dest 'tutorial'
  onlyIfNewer true
  overwrite false
}
tutorial.dependsOn shadowJar
